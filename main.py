import os
from datetime import datetime

import telebot
from telebot import types
import sqlite3
import pandas as pd
from telebot.types import CallbackQuery

conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS subscribers
                  (user_id INTEGER PRIMARY KEY, username TEXT)''')
conn.commit()

bot = telebot.TeleBot('7206503391:AAGZgZU4jsEAcCLbxIWpvZUZlyqdUBeKD08')


@bot.message_handler(commands=['start'])
def start(message):
    cursor.execute("SELECT COUNT(*) FROM subscribers")
    count = cursor.fetchone()[0]

    markup = types.InlineKeyboardMarkup()
    subscribe_button = types.InlineKeyboardButton(f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({count})", callback_data="check_sub")
    markup.add(subscribe_button)
    bot.send_message(message.chat.id, """<b>üòç –ú—É–∑—ã–∫–∞, –∞ –Ω–µ —Ä–æ–∑—ã–≥—Ä—ã—à!</b>
–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –æ–¥–Ω–∏ –Ω–∞—É—à–Ω–∏–∫–∏ Apple Airpods!
–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @vamdodomaru –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º.

–ò—Ç–æ–≥–∏ –ø–æ–¥–≤–µ–¥–µ–º 11 –∏—é–Ω—è –≤ 14:00 —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å –ø–æ–º–æ—â—å—é —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞. –ü—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏ –∏ –°–ù–ì, –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –Ω–∞—à —Å—á–µ—Ç! üî•""",
                     reply_markup=markup, parse_mode="HTML")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def check_subscription(message):
    if message.text == "/excel":
        generate_excel(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'check_sub')
def check_sub(call: CallbackQuery):
    user_id = call.from_user.id
    if (cursor.execute(f"SELECT * FROM subscribers WHERE user_id = '{user_id}'").fetchone()):
        bot.send_message(call.from_user.id, "–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ")
    elif check_if_subscribed(user_id, "@vamdodomaru"):
        add_to_database(user_id, call.from_user.username)
        bot.send_message(call.from_user.id, "–í—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ üî•")
    else:
        bot.send_message(call.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
    bot.answer_callback_query(call.id)


def check_if_subscribed(user_id, channel_username):
    try:
        chat_member = bot.get_chat_member(channel_username, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            return True
        else:
            return False
    except Exception as e:
        print("Error occurred: ", e)
        return False


def add_to_database(user_id, username=None):
    cursor.execute("INSERT INTO subscribers (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()


def generate_excel(chat_id):
    cursor.execute("SELECT * FROM subscribers WHERE username IS NOT NULL")
    now = datetime.now()
    formatted_time = now.strftime("%S%M%H")
    data = cursor.fetchall()
    data = list(map(lambda sublist: list(map(str, sublist)), data))
    filename = f"subscribers_{formatted_time}.xlsx"
    df = pd.DataFrame(data, columns=['User ID', 'Username'])
    df.to_excel(filename, index=False)
    with open(filename, "rb") as file:
        bot.send_document(chat_id=chat_id, document=file)
    os.remove(filename)


if __name__ == '__main__':
    bot.infinity_polling()
